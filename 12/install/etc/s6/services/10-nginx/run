#!/usr/bin/with-contenv bash

while [ ! -f /tmp/state/99-container-init ]
do
  sleep 1
done

if [ ! -f /tmp/state/10-nginx ]; then
sleep 2
    
    ### Database Check
	  if [ "$DB_TYPE" = "mysql" ];  then  
	    while true; do
	  mysqlcmd='mysql -u'$DB_USER' -h'$DB_HOST' -p'$DB_PASS 
	  out="`$mysqlcmd -e "SELECT COUNT(*) FROM information_schema.FILES;" 2>&1`"
	  echo "$out" | grep -E "COUNT|Enter" 2>&1 > /dev/null
	  if [ $? -eq 0 ]; then
	    echo "** [nextcloud] SQL Server "$DB_HOST" is up !"
	    break
	  fi
	  echo "** [nextcloud] Server "$DB_HOST" is not available. Retying in 2 seconds"
	  sleep 2
	done
	  fi

    chown -R nginx:www-data /www 
	chown -R nginx:www-data /assets/nextcloud

	# version_greater A B returns whether A > B
	function version_greater() {
		[[ "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1" ]];
	}

	# return true if specified directory is empty
	function directory_empty() {
	    [ -n "$(find "$1"/ -prune -empty)" ]
	}

	installed_version="0.0.0~unknown"
	if [ -f /www/nextcloud/version.php ]; then
	    installed_version=$(php -r 'require "/www/nextcloud/version.php"; echo "$OC_VersionString";')
	fi
	image_version=$(php -r 'require "/assets/nextcloud/version.php"; echo "$OC_VersionString";')

	if version_greater "$installed_version" "$image_version"; then
	    echo "Can't start Nextcloud because the version of the data ($installed_version) is higher than the docker image version ($image_version) and downgrading is not supported. Are you sure you have pulled the newest image version?"
	    exit 1
	fi

	if version_greater "$image_version" "$installed_version"; then
	    if [ "$installed_version" != "0.0.0~unknown" ]; then
	        sudo -u nginx php /www/nextcloud/occ app:list > /tmp/list_before
	    fi
	    
	    rsync -a --delete --exclude /config/ --exclude /data/ --exclude /custom_apps/ --exclude /themes/ /assets/nextcloud/ /www/nextcloud/
	    
	    for dir in config data themes; do
	        if [ ! -d /www/nextcloud/"$dir" ] || directory_empty /www/nextcloud/"$dir"; then
	            cp -arT /assets/nextcloud/"$dir" /www/nextcloud/"$dir"
	        fi
	    done

	    if [ ! -d /www/nextcloud/custom-apps ] || directory_empty /www/nextcloud/custom-apps; then
	        cp -arT /assets/nextcloud/custom-apps /www/nextcloud/custom-apps
	    fi

	    if [ "$installed_version" != "0.0.0~unknown" ]; then
	        su -u nginx php /www/nextcloud/occ upgrade --no-app-disable

	        su -u nginx php /www/nextcloud/occ app:list > /tmp/list_after

	        echo "The following apps have beed disabled:"
	        diff <(sed -n "/Enabled:/,/Disabled:/p" /tmp/list_before) <(sed -n "/Enabled:/,/Disabled:/p" /tmp/list_after) | grep '<' | cut -d- -f2 | cut -d: -f1
	        rm -f /tmp/list_before /tmp/list_after
	    fi
	fi

    sed -i -e "s/<CRON_PERIOD>/$CRON_PERIOD/g" /assets/cron/crontab.txt 
	sed -i -e "s/<PHP_MEMORY_LIMIT>/$PHP_MEMORY_LIMIT/g" /assets/cron/crontab.txt 

	### Check to see if this is a new install, if yes create directories...
	if [ ! -f /www/nextcloud/config/config.php ]; then
    echo "[nextcloud] New Installation Detected"
    CONFIGFILE=/www/nextcloud/config/config.php

    chown -R nginx:www-data /www 
	chown -R nginx:www-data /assets/nextcloud

	# Create an initial configuration file.
	instanceid=oc$(echo $PRIMARY_HOSTNAME | sha1sum | fold -w 10 | head -n 1)

cat > $CONFIGFILE <<EOF;
<?php
\$CONFIG = array (
  'datadirectory' => '/www/nextcloud/data',

  "apps_paths" => array (
      0 => array (
              "path"     => "/www/nextcloud/apps",
              "url"      => "/apps",
              "writable" => false,
      ),
      1 => array (
              "path"     => "/www/nextcloud/custom-apps",
              "url"      => "/custom-apps",
              "writable" => true,
      ),
  ),

  'memcache.local' => '\OC\Memcache\APCu',
  'log_type' => 'owncloud',
  'logfile' => '/www/logs/nextcloud/nextcloud.log',
  'instanceid' => '$instanceid',
);
?>
EOF

	# Create an auto-configuration file to fill in database settings
	# when the install script is run. Make an administrator account
	# here or else the install can't finish.
	adminpassword=$(dd if=/dev/urandom bs=1 count=40 2>/dev/null | sha1sum | fold -w 30 | head -n 1)

cat > /www/nextcloud/config/autoconfig.php <<EOF;
<?php
\$AUTOCONFIG = array (
  # storage/database
  'directory'     => '/www/nextcloud/data',
  'dbtype'        => '${DB_TYPE:-sqlite3}',
  'dbname'        => '${DB_NAME:-nextcloud}',
  'dbuser'        => '${DB_USER:-nextcloud}',
  'dbpass'        => '${DB_PASS:-password}',
  'dbhost'        => '${DB_HOST:-nextcloud-db}',
  'dbtableprefix' => 'oc_',
EOF
if [[ ! -z "$ADMIN_USER"  ]]; then
  cat >> /www/nextcloud/config/autoconfig.php <<EOF;
  # create an administrator account with a random password so that
  # the user does not have to enter anything on first load of ownCloud
  'adminlogin'    => '${ADMIN_USER}',
  'adminpass'     => '${ADMIN_PASS}',
EOF
fi
cat >> /www/nextcloud/config/autoconfig.php <<EOF;
);
?>
EOF

	echo "** [nextcloud] Starting automatic configuration"
	# Execute ownCloud's setup step, which creates the ownCloud database.
	# It also wipes it if it exists. And it updates config.php with database
	# settings and deletes the autoconfig.php file.
	chown -R nginx:www-data /www/nextcloud 
	(cd /www/nextcloud; sudo -u nginx php index.php &>/dev/null)
	echo "** [nextcloud] Automatic configuration finished."

	# Update config.php.
	# * trusted_domains is reset to localhost by autoconfig starting with ownCloud 8.1.1,
	#   so set it here. It also can change if the box's PRIMARY_HOSTNAME changes, so
	#   this will make sure it has the right value.
	# * Some settings weren't included in previous versions of Mail-in-a-Box.
	# * We need to set the timezone to the system timezone to allow fail2ban to ban
	#   users within the proper timeframe
	# * We need to set the logdateformat to something that will work correctly with fail2ban
	# Use PHP to read the settings file, modify it, and write out the new settings array.

	CONFIG_TEMP=$(/bin/mktemp)
sudo -u nginx php <<EOF > $CONFIG_TEMP && mv $CONFIG_TEMP $CONFIGFILE
<?php
include("/www/nextcloud/config/config.php");

//\$CONFIG['memcache.local'] = '\\OC\\Memcache\\Memcached';
\$CONFIG['mail_from_address'] = 'administrator'; # just the local part, matches our master administrator address
\$CONFIG['mail_smtphost'] = 'postfix-relay';

\$CONFIG['logtimezone'] = '$TIMEZONE';
\$CONFIG['logdateformat'] = 'Y-m-d H:i:s';
\$CONFIG['log_type'] = 'file';
\$CONFIG['logfile'] = '/www/logs/nextcloud/nextcloud.log';

echo "<?php\n\\\$CONFIG = ";
var_export(\$CONFIG);
echo ";";
?>
EOF

		sed -i "s/localhost/$VIRTUAL_HOST/g" /www/nextcloud/config/config.php
		chown -R nginx:www-data /www/nextcloud/
		# Enable/disable apps. Note that this must be done after the ownCloud setup.
		# The firstrunwizard gave Josh all sorts of problems, so disabling that.
		# user_external is what allows ownCloud to use IMAP for login. The contacts
		# and calendar apps are the extensions we really care about here.
			if [[ ! -z "$ADMIN_USER"  ]]; then
			sudo -u nginx php /www/nextcloud/occ app:disable firstrunwizard
			fi
   
	fi

	
	### Force Reset Permissions for Security
	chown -R nginx:www-data /www/nextcloud
	chown -R nginx:www-data /assets/nextcloud

    mkdir -p /www/logs/nextcloud
	mkdir -p /tmp/state
	echo '** Initialization Complete' >/tmp/state/10-nginx


fi

su -u nginx php /www/nextcloud/occ upgrade --no-app-disable
echo ''
echo '** [nextcloud] Starting nginx'
exec nginx